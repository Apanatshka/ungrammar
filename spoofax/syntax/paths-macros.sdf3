module paths-macros

imports

  tokens
  items
  types
  stmts-exprs

  paths-macros-options
  items-options
  stmts-exprs-options

context-free sorts
  Name NameRef Path PathSegment GenericArgList GenericArg TypeArg AssocTypeArg
  LifetimeArg ConstArg MacroCall TokenTree MacroItems MacroStmts

  PathQualifier PathSegmentAs GenArgList

context-free syntax

Name.Name =
  IDENT

NameRef.Ident =
  IDENT

NameRef.Int =
  INT

Path.Path =
  qualifier:PathQualifierOption segment:PathSegment

PathQualifier.PathQualifier = Path "::"

PathSegment.Crate =
  "crate"

PathSegment.Self =
  "self"

PathSegment.Super =
  "super"

PathSegment.PathSeg =
  ColonOption Name

PathSegment.GenericSeg =
  Name GenericArgListOption

PathSegment.ParamListSeg =
  Name ParamList RetTypeOption

PathSegment.Renaming =
  "<" Type PathSegmentAsOption ">"

PathSegmentAs.PathSegmentAs = "as" Type

GenericArgList.GenericArgList =
  ColonOption "<" GenArgList ">"

GenArgList.Trailing = {GenericArg ","}+ ","
GenArgList.NoTrailing = {GenericArg ","}*

GenericArg =
  TypeArg

GenericArg =
  AssocTypeArg

GenericArg =
  LifetimeArg

GenericArg =
  ConstArg

TypeArg =
  Type

AssocTypeArg.AssocTypeArg =
  Name AssocTypeArgRhs

AssocTypeArgRhs.TypeBound =
  ":" TypeBoundList

AssocTypeArgRhs.EqBound =
  "=" Type

LifetimeArg.Lifetime =
  LIFETIME

ConstArg =
  Expr

MacroCall.MacroCall =
  Attr* Path "!" NameOption TokenTree SemiOption

TokenTree.TokenTreeRound =
  "(" ")"

TokenTree.TokenTreeCurly =
  "{" "}"

TokenTree.TokenTreeSquare =
  "[" "]"

MacroItems.MacroItems =
  Item*

MacroStmts.MacroStmts =
  statements:Stmt*
  ExprOption