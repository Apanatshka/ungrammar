module stmts-exprs

imports
  tokens
  items
  patterns
  types
  paths-macros

  stmts-exprs-options
  items-options
  paths-macros-options

context-free sorts
  Stmt LetStmt ExprStmt Expr Literal PathExpr BlockExpr RefExpr TryExpr EffectExpr
  PrefixExpr BinExpr CastExpr ParenExpr ArrayExpr IndexExpr TupleExpr RecordExpr
  RecordExprFieldList RecordExprField CallExpr ArgList MethodCallLExpr FieldExpr
  ClosureExpr IfExpr Condition LoopExpr ForExpr WhileExpr Label BreakExpr ContinueExpr
  RangeExpr MatchExpr MatchArmList MatchArm MatchGuard ReturnExpr AwaitExpr BoxExpr

  ColonType Value RefExprMod EffectExprMod PrefixOp BinOp ArrayExprInner ExprList RecExprFieldList
  Spread ColonExpr ElseBranch ElseBranchInner RangeOp

context-free syntax

Stmt.Semi =
  ";"

Stmt =
  ExprStmt

Stmt =
  Item

Stmt =
  LetStmt

LetStmt.LetStmt =
  Attr* "let" Pat ColonTypeOption
  "=" initializer:Expr ";"

ColonType.ColonType = ":" Type

ExprStmt.ExprStmt =
  Attr* Expr SemiOption

Expr =
  ArrayExpr

Expr =
  AwaitExpr

Expr =
  BinExpr

Expr =
  BlockExpr

Expr =
  BoxExpr

Expr =
  BreakExpr

Expr =
  CallExpr

Expr =
  CastExpr

Expr =
  ClosureExpr

Expr =
  ContinueExpr

Expr =
  EffectExpr

Expr =
  FieldExpr

Expr =
  ForExpr

Expr =
  IfExpr

Expr =
  IndexExpr

Expr =
  Literal

Expr =
  LoopExpr

Expr =
  MacroCall

Expr =
  MatchExpr

Expr =
  MethodCallExpr

Expr =
  ParenExpr

Expr =
  PathExpr

Expr =
  PrefixExpr

Expr =
  RangeExpr

Expr =
  RecordExpr

Expr =
  RefExpr

Expr =
  ReturnExpr

Expr =
  TryExpr

Expr =
  TupleExpr

Expr =
  WhileExpr

Literal.Literal =
  Attr* value:Value

Value.Int =
  INT

Value.Float =
  FLOAT

Value.String =
  STRING

Value.RawString =
  RAWSTRING

Value.ByteString =
  BYTESTRING

Value.RawByteString =
  RAWBYTESTRING

Value.True =
  "true"

Value.False =
  "false"

Value.Char =
  CHAR

Value.Byte =
  BYTE

PathExpr.PathExpr =
  Attr* Path

BlockExpr.BlockExpr =
  "{"
    Attr*
    statements:Stmt*
    ExprOption
  "}"

RefExpr.RefExpr =
  Attr* "&" RefExprMod Expr

RefExprMod.Raw =
  "raw"

RefExprMod.Mut =
  "mut"

RefExprMod.Const =
  "const"

TryExpr.TryExpr =
  Attr* Expr "?"

EffectExpr.EffectExpr =
  Attr* LabelOption EffectExprMod BlockExpr

EffectExprMod.Try =
  "try"

EffectExprMod.Unsafe =
  "unsafe"

EffectExprMod.Async =
  "async"

PrefixExpr.PrefixExpr =
  Attr* op:PrefixOp Expr

PrefixOp.Neg =
  "-"

PrefixOp.Not =
  "!"

PrefixOp.Deref =
  "*"

BinExpr.BinExpr =
  Attr*
  lhs:Expr
  op:BinOp
  rhs:Expr

BinOp.Or =
  "||"

BinOp.And =
  "&&"

BinOp.Eq =
  "=="

BinOp.Neq =
  "!="

BinOp.Le =
  "<="

BinOp.Ge =
  ">="

BinOp.Lt =
  "<"

BinOp.Gt =
  ">"

BinOp.Add =
  "+"

BinOp.Mul =
  "*"

BinOp.Min =
  "-"

BinOp.Div =
  "/"

BinOp.Mod =
  "%"

BinOp.Shl =
  "<<"

BinOp.Shr =
  ">>"

BinOp.Xor =
  "^"

BinOp.Bor =
  "|"

BinOp.Band =
  "&"

BinOp.Ass =
  "="

BinOp.AddAss =
  "+="

BinOp.DivAss =
  "/="

BinOp.MulAss =
  "*="

BinOp.ModAss =
  "%="

BinOp.ShlAss =
  ">>="

BinOp.ShrAss =
  "<<="

BinOp.MinAss =
  "-="

BinOp.BorAss =
  "|="

BinOp.BandAss =
  "&="

BinOp.XorAss =
  "^="

CastExpr.CastExpr =
  Attr* Expr "as" Type

ParenExpr.ParenExpr =
  Attr* "(" Attr* Expr ")"

ArrayExpr.ArrayExpr =
  Attr* "[" Attr* ArrayExprInner "]"

ArrayExprInner = 
  ExprList

ArrayExprInner.InitWithLength = 
  Expr ";" Expr

ExprList.Trailing = {Expr ","}+ ","
ExprList.NoTrailing = {Expr ","}*

IndexExpr.IndexExpr =
  Attr* base:Expr "[" index:Expr "]"

TupleExpr.TupleExpr =
  Attr* "(" Attr* fields:ExprList ")"

RecordExpr.RecordExpr =
  Path RecordExprFieldList

RecordExprFieldList.RecordExprFieldList =
  "{"
    Attr*
    fields:RecExprFieldList
    SpreadOption
  "}"

RecExprFieldList.Trailing = {RecordExprField ","}+ ","
RecExprFieldList.NoTrailing = {RecordExprField ","}*

Spread.Spread = ".." spread:Expr

RecordExprField.RecordExprField =
  Attr* NameRef ColonExprOption

ColonExpr.ColonExpr = ":" Expr

CallExpr.CallExpr =
  Attr* Expr ArgList

ArgList.ArgList =
  "(" args:ExprList ")"

MethodCallExpr.MethodCallExpr =
  Attr* Expr "." NameRef GenericArgListOption ArgList

FieldExpr.FieldExpr =
  Attr* Expr "." NameRef

ClosureExpr.ClosureExpr =
  Attr* StaticOption AsyncOption MoveOption ParamList RetTypeOption
  body:Expr

IfExpr.IfExpr =
  Attr* "if" Condition then_branch:BlockExpr
  ElseBranchOption

ElseBranch.ElseBranch = "else" else_branch:ElseBranchInner

ElseBranchInner = IfExpr
ElseBranchInner = BlockExpr

Condition.Condition =
  "let" Pat "=" Expr

Condition =
  Expr

LoopExpr.LoopExpr =
  Attr* LabelOption "loop"
  loop_body:BlockExpr

ForExpr.ForExpr =
  Attr* LabelOption "for" Pat "in" iterable:Expr
  loop_body:BlockExpr

WhileExpr.WhileExpr =
  Attr* LabelOption "while" Condition
  loop_body:BlockExpr

Label.Label =
  LIFETIME

BreakExpr.BreakExpr =
  Attr* "break" LifetimeOption ExprOption

ContinueExpr.ContinueExpr =
  Attr* "continue" LifetimeOption

RangeExpr.RangeExpr =
  Attr* start:ExprOption op:RangeOp end:ExprOption

RangeOp.Exclusive = ".."
RangeOp.Inclusive = "..="

MatchExpr.MatchExpr =
  Attr* "match" Expr MatchArmList

MatchArmList.MatchArmList =
  "{"
    Attr*
    arms:MatchArm*
  "}"

MatchArm.MatchArm =
  Attr* Pat guard:MatchGuardOption "=>" Expr CommaOption

MatchGuard.MatchGuard =
  "if" Expr

ReturnExpr.ReturnExpr =
  Attr* "return" ExprOption

AwaitExpr.AwaitExpr =
  Attr* Expr "." "await"

BoxExpr.BoxExpr =
  Attr* "box" Expr