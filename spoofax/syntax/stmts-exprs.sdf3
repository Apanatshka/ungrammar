module stmts-exprs

imports

tokens
keywords
items
patterns
types
paths-macros

stmts-exprs-options
items-options
paths-macros-options

context-free sorts

Stmt Expr Literal BlockExpr RecordExprFieldList RecordExprField ArgList MethodCallLExpr IfExpr
Condition Label MatchArm MatchGuard

ColonType Value RefExprMod EffectExprMod ArrayExprInner ExprList RecExprFieldList
Spread ColonExpr ElseBranch ElseBranchInner RangeOp

context-free syntax

Stmt =
  SEMI

Stmt.ExprStmt =
  Attr* Expr SemiOption

Stmt =
  Item

Stmt.LetStmt =
  Attr* "let" Pat ColonTypeOption
  "=" initializer:Expr ";"

ColonType.ColonType = ":" Type

Expr.ArrayExpr =
  Attr* "[" Attr* ArrayExprInner "]"

Expr.AwaitExpr =
  Attr* Expr "." "await"

Expr =
  BlockExpr

Expr.BoxExpr =
  Attr* "box" Expr

Expr.BreakExpr =
  Attr* "break" LifetimeOption ExprOption

Expr.CallExpr =
  Attr* Expr ArgList

Expr.CastExpr =
  Attr* Expr "as" Type

Expr.ClosureExpr =
  Attr* StaticOption AsyncOption MoveOption ParamList RetTypeOption
  body:Expr

Expr.ContinueExpr =
  Attr* "continue" LifetimeOption

Expr.EffectExpr =
  Attr* LabelOption EffectExprMod BlockExpr

Expr.FieldExpr =
  Attr* Expr "." NameRef

Expr.ForExpr =
  Attr* LabelOption "for" Pat "in" iterable:Expr
  loop_body:BlockExpr

Expr =
  IfExpr

Expr.IndexExpr =
  Attr* base:Expr "[" index:Expr "]"

Expr =
  Literal

Expr.LoopExpr =
  Attr* LabelOption "loop"
  loop_body:BlockExpr

Expr =
  MacroCall

Expr.MatchExpr =
  Attr* "match" Expr "{"
    Attr*
    arms:MatchArm*
  "}"

Expr.MethodCallExpr =
  Attr* Expr "." NameRef GenericArgListOption ArgList

Expr.ParenExpr =
  Attr* "(" Attr* Expr ")"

Expr.PathExpr =
  Attr* Path

Expr.RangeExpr =
  Attr* start:ExprOption op:RangeOp end:ExprOption
  {non-assoc}

Expr.RecordExpr =
  Path RecordExprFieldList

Expr.RefExpr =
  Attr* "&" RefExprMod Expr

Expr.ReturnExpr =
  Attr* "return" ExprOption

Expr.TryExpr =
  Attr* Expr "?"

Expr.TupleExpr =
  Attr* "(" Attr* fields:ExprList ")"

Expr.WhileExpr =
  Attr* LabelOption "while" Condition
  loop_body:BlockExpr

Literal.Literal =
  Attr* value:Value

Value.Int =
  INT

Value.Float =
  FLOAT

Value.String =
  STRING

Value.RawString =
  RAWSTRING

Value.ByteString =
  BYTESTRING

Value.RawByteString =
  RAWBYTESTRING

Value.True =
  "true"

Value.False =
  "false"

Value.Char =
  CHAR

Value.Byte =
  BYTE

BlockExpr.BlockExpr =
  "{"
    Attr*
    statements:Stmt*
    ExprOption
  "}"

RefExprMod.Raw =
  "raw"

RefExprMod.Mut =
  "mut"

RefExprMod.Const =
  "const"

EffectExprMod.Try =
  "try"

EffectExprMod.Unsafe =
  "unsafe"

EffectExprMod.Async =
  "async"

Expr.Neg =
  Attr* "-" Expr

Expr.Not =
  Attr* "!" Expr

Expr.Deref =
  Attr* "*" Expr

Expr.Or =
  Attr*
  lhs:Expr
  "||"
  rhs:Expr
  {left}

Expr.And =
  Attr*
  lhs:Expr
  "&&"
  rhs:Expr
  {left}

Expr.Eq =
  Attr*
  lhs:Expr
  "=="
  rhs:Expr
  {non-assoc}

Expr.Neq =
  Attr*
  lhs:Expr
  "!="
  rhs:Expr
  {non-assoc}

Expr.Le =
  Attr*
  lhs:Expr
  "<="
  rhs:Expr
  {non-assoc}

Expr.Ge =
  Attr*
  lhs:Expr
  ">="
  rhs:Expr
  {non-assoc}

Expr.Lt =
  Attr*
  lhs:Expr
  "<"
  rhs:Expr
  {non-assoc}

Expr.Gt =
  Attr*
  lhs:Expr
  ">"
  rhs:Expr
  {non-assoc}

Expr.Add =
  Attr*
  lhs:Expr
  "+"
  rhs:Expr
  {left}

Expr.Mul =
  Attr*
  lhs:Expr
  "*"
  rhs:Expr
  {left}

Expr.Sub =
  Attr*
  lhs:Expr
  "-"
  rhs:Expr
  {left}

Expr.Div =
  Attr*
  lhs:Expr
  "/"
  rhs:Expr
  {left}

Expr.Rem =
  Attr*
  lhs:Expr
  "%"
  rhs:Expr
  {left}

Expr.Shl =
  Attr*
  lhs:Expr
  "<<"
  rhs:Expr
  {left}

Expr.Shr =
  Attr*
  lhs:Expr
  ">>"
  rhs:Expr
  {left}

Expr.Xor =
  Attr*
  lhs:Expr
  "^"
  rhs:Expr
  {left}

Expr.Bor =
  Attr*
  lhs:Expr
  "|"
  rhs:Expr
  {left}

Expr.Band =
  Attr*
  lhs:Expr
  "&"
  rhs:Expr
  {left}

Expr.Ass =
  Attr*
  lhs:Expr
  "="
  rhs:Expr
  {left}

Expr.AddAss =
  Attr*
  lhs:Expr
  "+="
  rhs:Expr
  {left}

Expr.DivAss =
  Attr*
  lhs:Expr
  "/="
  rhs:Expr
  {left}

Expr.MulAss =
  Attr*
  lhs:Expr
  "*="
  rhs:Expr
  {left}

Expr.RemAss =
  Attr*
  lhs:Expr
  "%="
  rhs:Expr
  {left}

Expr.ShlAss =
  Attr*
  lhs:Expr
  ">>="
  rhs:Expr
  {left}

Expr.ShrAss =
  Attr*
  lhs:Expr
  "<<="
  rhs:Expr
  {left}

Expr.SubAss =
  Attr*
  lhs:Expr
  "-="
  rhs:Expr
  {left}

Expr.BorAss =
  Attr*
  lhs:Expr
  "|="
  rhs:Expr
  {left}

Expr.BandAss =
  Attr*
  lhs:Expr
  "&="
  rhs:Expr
  {left}

Expr.XorAss =
  Attr*
  lhs:Expr
  "^="
  rhs:Expr
  {left}

ArrayExprInner = 
  ExprList

ArrayExprInner.InitWithLength = 
  Expr ";" Expr

ExprList.Trailing = {Expr ","}+ ","
ExprList.NoTrailing = {Expr ","}*

RecordExprFieldList.RecordExprFieldList =
  "{"
    Attr*
    fields:RecExprFieldList
    SpreadOption
  "}"

RecExprFieldList.Trailing = {RecordExprField ","}+ ","
RecExprFieldList.NoTrailing = {RecordExprField ","}*

Spread.Spread = ".." spread:Expr

RecordExprField.RecordExprField =
  Attr* NameRef ColonExprOption

ColonExpr.ColonExpr = ":" Expr

ArgList.ArgList =
  "(" args:ExprList ")"

IfExpr.IfExpr =
  Attr* "if" Condition then_branch:BlockExpr
  ElseBranchOption

ElseBranch.ElseBranch = "else" else_branch:ElseBranchInner

ElseBranchInner = IfExpr
ElseBranchInner = BlockExpr

Condition.Let =
  "let" Pat "=" Expr

Condition =
  Expr

Label.Label =
  LIFETIME

RangeOp.Exclusive = ".."
RangeOp.Inclusive = "..="


MatchArm.MatchArm =
  Attr* Pat guard:MatchGuardOption "=>" Expr CommaOption

MatchGuard.MatchGuard =
  "if" Expr

context-free priorities

Expr.PathExpr >
Expr.MethodCallExpr >
Expr.FieldExpr >
{ Expr.CallExpr Expr.ArrayExpr } >
Expr.TryExpr >
{ Expr.Neg Expr.Deref Expr.Not Expr.RefExpr } >
Expr.CastExpr >
{ left: Expr.Mul Expr.Div Expr.Rem } >
{ left: Expr.Add Expr.Sub } >
{ left: Expr.Shl Expr.Shr } >
Expr.Band >
Expr.Xor >
Expr.Bor >
{ non-assoc: Expr.Eq Expr.Neq Expr.Lt Expr.Gt Expr.Le Expr.Ge } >
Expr.And >
Expr.Or >
Expr.RangeExpr >
{ right: Expr.Ass Expr.AddAss Expr.SubAss Expr.MulAss Expr.DivAss Expr.RemAss
         Expr.BandAss Expr.BorAss Expr.XorAss Expr.ShlAss Expr.ShrAss } >
{ Expr.ReturnExpr Expr.BreakExpr Expr.ClosureExpr }
